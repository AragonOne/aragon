import React from 'react'
import { styled } from '@aragon/ui'

// See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe for details about sandbox
// `sandbox` works like a whitelist: by default, almost every functionality is restricted.
const SANDBOX = [
  // Allows new browsing contexts (e.g. new windows or tabs) generated by the
  // iframe to escape the sandbox restrictions. Otherwise, new contexts would
  // share the same restrictions as their originating iframe (in our case, the
  // new contexts would only have the ability to run JavaScript).
  'allow-popups-to-escape-sandbox',

  // Gotta run 'em all!
  'allow-scripts',

  // Note that we haven't enabled:
  //   - 'allow-same-origin':
  //       The most important security setting: leaving this disabled lets the
  //       iframe be considered as coming from a unique, orphan origin. This
  //       means that the page won't have access to any cookies, local/session
  //       storage, or access to open pages (e.g. the parent window, this Dapp).
  //
  //       However, this does force some restrictions:
  //         - `window.postMessage()` must use `*` as an origin to communicate
  //           with this iframe
  //         - React devtools can't be hooked in from the browser, so you have
  //           to use the native `react-devtools` electron app for debugging
  //
  //  - 'allow-top-navigation':
  //       Leaving this disabled disallows the iframe from navigating the
  //       Dapp's context (e.g. to a malicious page)
].join(' ')

class AppIFrame extends React.Component {
  isHidden = () => {
    const { hidden, src } = this.props
    return !src || hidden
  }
  render() {
    const { src, ...props } = this.props
    const show = !this.isHidden()

    // Remove onLoad prop as we wrap it with our own
    delete props.onLoad

    return (
      <StyledIFrame
        frameBorder={0}
        onLoad={this.handleOnLoad}
        ref={iframe => {
          this.iframe = iframe
        }}
        sandbox={SANDBOX}
        style={{
          display: show ? 'initial' : 'none',
        }}
        src={src}
        {...props}
      />
    )
  }
}

const StyledIFrame = styled.iframe`
  display: block;
  height: 100%;
  width: 100%;
`

export default AppIFrame
